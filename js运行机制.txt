
js运行机制
   js单线程 (一个时间内只能干一件事)
   	 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？
   任务队列 （同步任务 异步任务setTimeout,要挂起）
     果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。

	 JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。
	 于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。

   任务队列：先处理同步任务，再处理异步任务
      （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。
	  （2）主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。
      （3）一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
      （4）主线程不断重复上面的第三步。
      "任务队列"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入"任务队列"，等待主线程读取。

      所谓"回调函数"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。但是，由于存在后文提到的"定时器"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。

   异步放入和执行时间：没有放到异步队列，时间到，才扔到异步队列中，
   eventLoop 
   异步任务：
     setTimeout setInterval
     dom事件
     es6的promise


     提升页面性能方法：
     1.资源压缩合并，减少HTTP请求
     2.非核心代码异步加载->异步加载方式->异步加载的区别
     3.利用浏览器缓存->缓存的分类->缓存的原理
     4.使用CDN，加速资源，网络优化
     5.预解析DNS   多个域名时效果更优：dns-prefetch  
         https默认关闭预解析<meta http-equiv="x-dns-prefetch-control" content="on">
         <link rel="dns-prefetch" href="//host_name_to_prefetch.com">

       异步加载的方式：1.动态脚本加载   2.defer     3.async
       异步加载的区别：
          1.defer是在HTML解析后才会执行，如果多个，按照加载的顺序依次执行
          2.async是在加载完之后立即执行，如果多个，执行顺序和加载顺序无关（如果有async属性，那么script将被异步下载并执行，同时浏览器继续后续的处理。）

