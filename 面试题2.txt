
前端安全问题主要有XSS、CSRF攻击
XSS：跨站脚本攻击
它允许用户将恶意代码植入到提供给其他用户使用的页面中，可以简单的理解为一种javascript代码注入。
XSS的防御措施：

过滤转义输入输出
避免使用eval、new Function等执行字符串的方法，除非确定字符串和用户输入无关
使用cookie的httpOnly属性，加上了这个属性的cookie字段，js是无法进行读写的
使用innerHTML、document.write的时候，如果数据是用户输入的，那么需要对象关键字符进行过滤与转义
CSRF：跨站请求伪造
其实就是网站中的一些提交行为，被黑客利用，在你访问黑客的网站的时候进行操作，会被操作到其他网站上
CSRF防御措施：

检测http referer是否是同域名
避免登录的session长时间存储在客户端中
关键请求使用验证码或者token机制


当new Foo()时发生了什么
1.创建了一个新对象
2.将新创建的空对象的隐式原型指向其构造函数的显示原型。
3.将this指向这个新对象
4.如果无返回值或者返回一个非对象值，则将新对象返回；如果返回值是一个新对象的话那么直接直接返回该对象。

你做过哪些性能优化
雪碧图，移动端响应式图片，静态资源CDN，减少Dom操作（事件代理、fragment），压缩JS和CSS、HTML等，DNS预解析

浏览器渲染原理
HTML被解析成DOM Tree，CSS被解析成CSS Rule Tree
把DOM Tree和CSS Rule Tree经过整合生成Render Tree（布局阶段）
元素按照算出来的规则，把元素放到它该出现的位置，通过显卡画到屏幕上

script标签的defer、async的区别
defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行
async是在加载完成后立即执行，如果是多个，执行顺序和加载顺序无关


什么是同源策略及限制
什么是同源策略 
同源策略：从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键安全机制。 
源：一个源指的是主机名、协议和端口号的组合，必须相同 
同源的限制 
不是一个源的文档没有权利去操作另一个源的文档，限制在如下方面：

Cookie、LocalStorage 和 IndexDB无法读取
DOM无法获得
AJAX请求不能发送

前后端如何通信
最常用的无外乎下面三种：

Ajax，同源下面的通信方式
WebSocket，不受同源策略限制
CORS，新的通信标准
如何创建Ajax
需要留意如下几点：

XMLHttpRequest对象的工作流程
兼容性处理
事件触发的条件
事件触发的顺序
跨域通信的几种方式
网上有很多文章总结了很多，这里只说如下几种：

JSONP
Hash
postMessage(HTML5)
WebSocket
CORS

JSONP原理 
基本原理：利用script标签的异步加载特性实现 
给服务端传一个回调函数，服务器返回一个传递过去的回调函数名称的JS代码 
Hash 
利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B

// 在A中伪代码如下：
var B = document.getElementsByTagName('iframe');
B.src = B.src + '#' + 'data';
// 在B中的伪代码如下
window.onhashchange = function () {
    var data = window.location.hash;
};

postMessage 
窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息

Bwindow.postMessage('data', 'http://B.com');
// 在窗口B中监听
Awindow.addEventListener('message', function (event) {
      console.log(event.origin);
      console.log(event.source);
      console.log(event.data);
}, false);
WebSocket

var ws = new WebSocket('wss://echo.websocket.org');
监听onopen,onmessage,onclose事件 
CORS 
CORS【参考资料】http://www.ruanyifeng.com/blog/2016/04/cors.html 
HTML5 的fetch API

// url（必选），options（可选）
fetch('/some/url/', {
      method: 'get',
}).then(function (response) {
     // success
}).catch(function (err) {
       // 出错了，等价于 then 的第二个参数，但这样更好用更直观
});


ES6 let、const
let
let是更完美的var

let声明的变量拥有块级作用域,let声明仍然保留了提升的特性，但不会盲目提升。
let声明的全局变量不是全局对象的属性。不可以通过window.变量名的方式访问
形如for (let x…)的循环在每次迭代时都为x创建新的绑定
let声明的变量直到控制流到达该变量被定义的代码行时才会被装载，所以在到达之前使用该变量会触发错误。
const
定义常量值，不可以重新赋值，但是如果值是一个对象，可以改变对象里的属性值

CSS3 box-sizing的作用
设置CSS盒模型为标准模型或IE模型。标准模型的宽度只包括content，二IE模型包括border和padding

box-sizing属性可以为三个值之一：

content-box，默认值，border和padding不计算入width之内
padding-box，padding计算入width内
border-box，border和padding计算入width之内


BFC(Block formatting context)直译为"块级格式化上下文"。它是一个独立的渲染区域，只有 Block-level box 参 与， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。

BFC的渲染特点

BFC这个元素的垂直方向的边距会发生重叠，垂直方向的距离由margin决定，取最大值
BFC的区域不会与浮动元素的box重叠（清除浮动原理）
计算BFC的高度的时候，浮动元素也会参与计算
哪些元素会生成 BFC

BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。

根元素
overflow不为visible
float不为none
position为absolute或fixed
display为inline-block、table-cell、table-caption、flex、inline-flex
BFC的使用场景

他的很常用的一个应用场景就是解决边距重叠、清楚浮动的问题.